/*
 * Etagi project
 * widget geoHelpers constant
 * denis.zemlyanov@it.etagi.com
 */

const geoHelpers = {
  distances: {
    yards: 6967410,
    km: 6371,
    miles: 3959,
    metres: 6371000,
    feet: 20902231
  },

  toRad: n => {
    return n * Math.PI / 180;
  },

  /**
   * Function which calculates a single distance between two points
   * @function retrieveDistance
   * @param  {object} data [object generated by getDistance method]
   * @param  {number} data.earthRadius [Contains the radius]
   * @param  {number} data.decimals [Contains the amount of decimals]
   * @param  {number} data.dLat [From minus to Lat radian]
   * @param  {number} data.dLng [From minus to Lng radian]
   * @param  {number} data.toLat [To Latitude]
   * @param  {number} data.fromLat [From Latitude radian]
   * @return {number}      [Returns the caculated distance]
   */
  retrieveDistance: data => {
    const {
      earthRadius, decimals, dLat, dLng, toLat, fromLat
    } = data;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.sin(dLng / 2) * Math.sin(dLng / 2) * Math.cos(toLat) *
      Math.cos(fromLat);
    const b = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const c = earthRadius * b;
    const d = (Math.round(c * Math.pow(10, decimals)) /
      Math.pow(10, decimals)) * 1000;

    return d;
  },

  /**
   * Function to retrieve the difference in a human readable length such
   * as km between two difference longitude and latitude points
   * @function init
   * @memberOf geoDistance
   *
   * @param  {object} from    [Contains the main starting lng/lat point]
   * @param  {number} from.lat [Latitude]
   * @param  {number} from.lng [Longitutde]
   * @param  {array<object>}  to [Can contain multiple end lng/lat points]
   * @param  {number} to.lat [Latitude]
   * @param  {number} to.lng [Longitude]
   * @param  {string} len [units of length]
   * @param  {number} dec [decimals for result]
   * @return {Object}          [Returns the to object with the distance]
   */
  getDistance: (from, to, len, dec) => {
    const decimals = dec || 2;
    const length = len || 'km';

    const fromObj = from;
    const earthRadius = geoHelpers.distances[length];
    const fromLng = geoHelpers.toRad(fromObj.lng);
    const fromLat = geoHelpers.toRad(fromObj.lat);

    to.forEach(item => {
      const toLat = geoHelpers.toRad(item.lat);
      const toLng = geoHelpers.toRad(item.lng);
      const data = {
        earthRadius: earthRadius,
        decimals: decimals,
        dLat: fromLat - toLat,
        dLng: fromLng - toLng,
        toLat: toLat,
        fromLat: fromLat
      };

      item.distance = geoHelpers.retrieveDistance(data);
    });

    return to;
  }
};

export default geoHelpers;
